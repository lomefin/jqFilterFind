// Generated by CoffeeScript 1.6.3
(function() {
  var JQFilterFinder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  JQFilterFinder = (function() {
    JQFilterFinder.prototype.defaults = {
      cardClass: 'card',
      containerClass: 'filter-finder-container',
      filters: [],
      finder: 'lookup',
      filterClass: 'input-medium',
      finderClass: 'input-medium search-query',
      foundClass: 'found',
      notFoundClass: 'hidden'
    };

    JQFilterFinder.prototype.bind = function() {
      var squatcher,
        _this = this;
      squatcher = this.options.squatcher;
      this.filters = {};
      this.searchTerms = [];
      $(this.options.filters).each(function(idx, item) {
        return _this.filters[item] = [''];
      });
      $(this.options.filters).each(function(_idx, filter) {
        $('.' + _this.options.cardClass).each(function(idx, card) {
          var cardData;
          cardData = $(card).data(filter);
          if (cardData != null) {
            return _this.filters[filter].push(cardData);
          }
        });
        return _this.filters[filter] = _this.filters[filter].unique();
      });
      $('.' + this.options.cardClass).each(function(idx, card) {
        var cardData;
        cardData = squatcher($(card).data(_this.options.finder));
        $(card).data(_this.options.finder, cardData);
        if ((cardData != null) && cardData.length > 0) {
          return _this.searchTerms.push(cardData);
        }
      });
      this.searchTerms = this.searchTerms.unique();
      return this.buildComponent();
    };

    JQFilterFinder.prototype.buildComponent = function() {
      var container, finder,
        _this = this;
      container = $('.' + this.options.containerClass);
      $(this.options.filters).each(function(idx, filterName) {
        var filter, label;
        filter = $('<select>').attr('name', 'filter-' + filterName).addClass(_this.options.filterClass);
        label = $('<label>').attr('for', 'filter-' + filterName).text(filterName);
        container.append(label).append(filter);
        $(_this.filters[filterName]).each(function(_idx, filterValue) {
          return filter.append($('<option>').val(filterValue).text(filterValue));
        });
        return filter.on('change', {
          cardClass: _this.options.cardClass,
          dataElement: filterName
        }, _this.search);
      });
      finder = $('<input type="text">').addClass(this.options.finderClass);
      container.append(finder);
      return finder.on('keyup', {
        cardClass: this.options.cardClass,
        dataElement: this.options.finder
      }, this.search);
    };

    JQFilterFinder.prototype.search = function(evt) {
      var comparer, finder, foundClass, notFoundClass, options, value;
      comparer = this.options.finderComparer;
      foundClass = this.options.foundClass;
      notFoundClass = this.options.notFoundClass;
      finder = evt.data.dataElement;
      options = this.options;
      value = "" + $(evt.delegateTarget).val();
      return $('.' + evt.data.cardClass).each(function(idx, card) {
        if (comparer(value, $(card).data(finder))) {
          $(card).addClass(foundClass);
          return $(card).removeClass(notFoundClass);
        } else {
          $(card).addClass(notFoundClass);
          return $(card).removeClass(foundClass);
        }
      });
    };

    function JQFilterFinder(options) {
      if (options == null) {
        options = {};
      }
      this.search = __bind(this.search, this);
      this.buildComponent = __bind(this.buildComponent, this);
      this.bind = __bind(this.bind, this);
      this["default"] = $.extend(true, this.defaults, {
        finderComparer: this.finderComparer,
        squatcher: this.squatcher
      });
      this.options = $.extend(true, this.defaults, options);
      window.options = this.options;
      window.instance = this;
    }

    JQFilterFinder.prototype.finderComparer = function(searchQuery, elementValue) {
      var rx, value;
      value = searchQuery.toLowerCase().replace(/[ ]/g, "");
      rx = new RegExp(value);
      return elementValue.toString().match(rx) !== null;
    };

    JQFilterFinder.prototype.squatcher = function(value) {
      return value.toLowerCase().replace(/[ ]/g, "");
    };

    return JQFilterFinder;

  })();

  if (window.JQFilterFinder == null) {
    window.JQFilterFinder = JQFilterFinder;
  }

}).call(this);
